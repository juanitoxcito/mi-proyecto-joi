name: Build Kivy Android APK

on:
  push:
    branches:
      - main # Este flujo de trabajo se activará cada vez que haya un 'push' a la rama 'main'

jobs:
  build:
    runs-on: ubuntu-latest # ¡CLAVE! Ejecutamos en un runner estándar de Ubuntu
    # Eliminamos el bloque 'container:' de aquí para evitar conflictos de permisos

    steps:
    - name: Checkout code # Esta acción ahora se ejecuta en el runner de Ubuntu sin problemas de permisos
      uses: actions/checkout@v4

    - name: Install Python dependencies (on host runner, if needed for buildozer)
      run: |
        # Instalamos Buildozer en el host para que el comando 'buildozer' esté disponible
        # para el 'docker run' si es necesario, aunque se ejecutará dentro del contenedor.
        # Esto es más bien una precaución.
        pip install --upgrade pip
        pip install buildozer

    - name: Build Android APK using Docker Container # ¡CLAVE! Lanzamos el contenedor manualmente
      run: |
        # Definimos el directorio de trabajo dentro del contenedor
        CONTAINER_WORKDIR="/app"

        # Ejecutamos el contenedor Docker con los permisos de root
        # Montamos el directorio actual del repositorio (que ya fue descargado) en /app dentro del contenedor
        # Establecemos HOME a /tmp dentro del contenedor para evitar problemas de permisos
        # Ejecutamos todos los comandos de Buildozer secuencialmente
        docker run --rm \
          -v "$(pwd):${CONTAINER_WORKDIR}" \
          -w "${CONTAINER_WORKDIR}" \
          --user root \
          -e HOME=/tmp \
          kivy/python-for-android \
          bash -c " \
            export PATH=\"\$HOME/.local/bin:\$PATH\" && \
            echo 'Iniciando Buildozer y compilando Joi...' && \
            pip install --upgrade pip && \
            # buildozer ya está instalado en el host, pero lo reinstalamos en el contenedor para asegurar
            pip install buildozer && \
            pip install pyjnius==1.4.2 firebase-admin google-generativeai httpx==0.28.1 idna==3.6 charset_normalizer==3.3.2 requests==2.31.0 pytz plyer && \
            rm -rf .buildozer && \
            if [ -f buildozer.spec ]; then rm buildozer.spec; fi && \
            buildozer init && \
            sed -i 's/^#*title = .*$/title = JoiApp/' buildozer.spec && \
            sed -i 's/^#*package.name = .*$/package.name = joi/' buildozer.spec && \
            sed -i 's/^#*package.domain = .*$/package.domain = org.joi/' buildozer.spec && \
            sed -i 's/^#*android.api = .*$/android.api = 33/' buildozer.spec && \
            sed -i 's/^#*android.minapi = .*$/android.minapi = 24/' buildozer.spec && \
            sed -i 's/^#*requirements = .*$/requirements = python3,kivy,kivymd,firebase-admin,google-generativeai,requests,pytz,plyer/' buildozer.spec && \
            sed -i 's/^#*android.ndk = .*$/android.ndk = 25b/' buildozer.spec && \
            sed -i 's/^#*android.archs = .*$/android.archs = arm64-v8a,armeabi-v7a/' buildozer.spec && \
            sed -i 's/^#*log_level = .*$/log_level = 2/' buildozer.spec && \
            sed -i '/^#*android.accept_sdk_license =/c\android.accept_sdk_license = True' buildozer.spec && \
            sed -i '/^#*android.build_tools =/c\android.build_tools = 33.0.0' buildozer.spec && \
            buildozer android debug && \
            echo 'Compilación de Joi completada.' \
          "

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: joi-android-apk
        path: bin/*.apk # Sube el archivo .apk generado por Buildozer
