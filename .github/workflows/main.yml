name: Build Kivy Android APK

on:
  push:
    branches:
      - main # Este flujo de trabajo se activará cada vez que haya un 'push' a la rama 'main'

jobs:
  build:
    runs-on: ubuntu-latest # Usamos un entorno Linux actualizado

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Descarga tu código del repositorio

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Usamos Python 3.10, que es compatible con Kivy y Buildozer

    - name: Install Buildozer and Kivy dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y \
            openjdk-11-jdk \
            build-essential \
            libffi-dev \
            git \
            zip \
            unzip \
            ant \
            python3-pip \
            python3-dev \
            cython3 \
            libsdl2-dev \
            libsdl2-image-dev \
            libsdl2-mixer-dev \
            libsdl2-ttf-dev \
            libportmidi-dev \
            libswscale-dev \
            libavformat-dev \
            libavcodec-dev \
            zlib1g-dev \
            libgstreamer1.0-dev \
            gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good \
            libtool \
            pkg-config \
            autoconf \
            libtool-bin \
            m4 \
            autotools-dev
        pip install --upgrade pip
        pip install cython==0.29.36 pyjnius==1.4.2
        # ¡IMPORTANTE! Hemos añadido versiones específicas para httpx e idna para resolver el error 'resolution-too-deep'
        pip install kivy kivymd python-for-android buildozer plyer firebase-admin google-generativeai httpx==0.28.1 idna==3.6

    - name: Configure JAVA_HOME
      run: |
        echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV

    - name: Clean Buildozer cache
      run: |
        buildozer android clean

    - name: Initialize Buildozer and modify spec file
      run: |
        buildozer init
        # Escribir el script de Python a un archivo temporal de forma segura para YAML
        # Usamos un bloque literal (|) para el script, lo que es más robusto para YAML
        cat > modify_spec.py << 'EOF'
import os

buildozer_spec_path = os.path.join(os.getcwd(), 'buildozer.spec')

with open(buildozer_spec_path, 'r') as f:
    lines = f.readlines()

new_lines = []
for line in lines:
    if line.strip().startswith('title ='):
        new_lines.append('title = JoiApp\n')
    elif line.strip().startswith('package.name ='):
        new_lines.append('package.name = joi\n')
    elif line.strip().startswith('package.domain ='):
        new_lines.append('package.domain = org.joi\n')
    elif line.strip().startswith('android.api ='):
        new_lines.append('android.api = 33\n')
    elif line.strip().startswith('android.minapi ='):
        new_lines.append('android.minapi = 24\n')
    elif line.strip().startswith('requirements ='):
        new_lines.append('requirements = python3,kivy,kivymd,firebase-admin,google-generativeai,requests,pytz,plyer\n')
    elif line.strip().startswith('android.ndk ='):
        new_lines.append('android.ndk = 25b\n')
    elif line.strip().startswith('android.archs ='):
        new_lines.append('android.archs = arm64-v8a,armeabi-v7a\n')
    else:
        new_lines.append(line)

with open(buildozer_spec_path, 'w') as f:
    f.writelines(new_lines)

print('buildozer.spec modificado exitosamente con la configuración deseada.')
EOF
        # Ejecutar el script de Python
        python modify_spec.py

    - name: Build Android APK
      run: |
        buildozer android debug

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: joi-android-apk
        path: bin/*.apk # Sube el archivo .apk generado por Buildozer
